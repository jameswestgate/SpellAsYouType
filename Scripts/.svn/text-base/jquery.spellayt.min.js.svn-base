/*
* Spell As You Type jQuery Plugin v1.1.0
*
* Copyright (c) 2009 Honda UK (www.honda.co.uk)
* Written by James Westgate
*
* @requires jQuery v1.3.2 or later
*
* Dual licensed under the MIT and GPL licenses:
*   http://www.opensource.org/licenses/mit-license.php
*   http://www.gnu.org/licenses/gpl.html
*
* Dictionary.txt based on the English wordlist created by Kevin Atkinson for Pspell and Aspell
* licensed under the LGPL license.
*
*/
(function($) {
    global = { dictionaryArray: new Array(26), words: new Array(), suggestions: new Object(), ready: false, loading: false, changed: false, options: null, wordQueue: new Array(), wordTimer: 0, highlight: 0, breakTimer: 0, current: null, suggestQueue: new Array(), suggestTimer: 0 }; $.fn.extend({ spellayt: function(options) { if (!$.browser.msie) return; if ($.browser.version < 6) return; global.options = $.extend({}, $.fn.spellayt.defaults, options); if (!global.ready && !global.loading) { global.loading = true; $.ajax({ type: "GET", url: global.options.url, dataType: "text", success: function(data) { loadDictionary(data); global.ready = true; if ($.fn.spellayt.loaded != null) $.fn.spellayt.loaded(); global.loading = false; $.fn.spellayt.startCheck(); }, error: function(XMLHttpRequest, textStatus, errorThrown) { if ($.fn.spellayt.loadError != null) $.fn.spellayt.loadError(textStatus); global.loading = false; } }); } $(window).scroll(function(event) { $('.spellayt').remove(); }); $(window).bind('resize', function() { $('.spellayt').remove(); }); $("<div style='position:absolute;top:0;left:-10;width:1;height:1'></div>").appendTo(document.body).show(); return this.each(function(i) { $(this).focus(function(event) { global.current = this; if (global.ready) $.fn.spellayt.startCheck(); }); $(this).blur(function(event) { if (global.ready) $.fn.spellayt.stopCheck(); }); $(this).mousedown(function(event) { $('.spellaytDiv').remove(); }); $(this).scroll(function(event) { $('.spellayt').remove(); }); $(this).keydown(function(e) { $.fn.spellayt.highlight(global.current); if (e.keyCode == 27) { $('.spellaytDiv').remove(); } global.changed = true; }); $(this).bind("contextmenu", function() { return !showSuggestions(this); }); }); } }); $.fn.spellayt.defaults = { url: "dictionary.txt", matchSentence: /[^.!?]+/g, matchWord: /[a-zA-Z0-9_]+/g, maximum: 12, milliseconds: 50, resources: { ignore: "Ignore All", nosuggest: "No Suggestions"} }; $.fn.spellayt.clear = function() { $('.spellayt').remove(); }; $.fn.spellayt.startCheck = function() { if (global.current != null) { global.breakTimer = setInterval(function() { if (global.wordQueue.length == 0) breakText(global.current); }, 500); global.highlight = setInterval(function() { $.fn.spellayt.highlight(global.current); }, 500); doWordBreak(); } }; $.fn.spellayt.stopCheck = function() { $('.spellaytDiv').remove(); $('.spellayt').remove(); clearTimeout(global.wordTimer); clearInterval(global.highlight); clearInterval(global.breakTimer); }; $.fn.spellayt.loaded = null; $.fn.spellayt.loadError = null; $.fn.spellayt.ready = function() { return global.ready; }; $.fn.spellayt.checkSpelling = function(input) { if (input == null) return false; if (!global.ready) return false; clearTimeout(global.wordTimer); clearInterval(global.highlight); clearInterval(global.breakTimer); global.changed = false; breakText(input); while (global.wordQueue.length > 0) { doWordBreak(); } $.fn.spellayt.highlight(input); return true; }; $.fn.spellayt.highlight = function(input) {
        if (input == null) return; $.fn.spellayt.clear(); var wholeWordsOnly = 2; var suggestions = global.suggestions
        var scrolltop = $(window).scrollTop(); var scrollleft = $(window).scrollLeft(); var inputscroll = $(input).scrollTop(); var inputscrollleft = $(input).scrollLeft(); var pos = $(input).offset(); var inputright = pos.left + $(input).width(); var inputbottom = pos.top + $(input).height(); for (var de in suggestions) { var suggest = suggestions[de]; if (!suggest.match && !suggest.ignore) { var wholerange = input.createTextRange(); var range = wholerange.duplicate(); while (range.findText(suggest.term, 0, wholeWordsOnly)) { var x = range.boundingLeft - 1 + scrollleft + inputscrollleft; var y = range.boundingTop + range.boundingHeight - 4 + scrolltop + inputscroll; if (y + 3 > inputbottom) break; if (y > pos.top && x > pos.left && (x + range.boundingWidth < inputright)) { $("<div id='divWord' class='spellayt' style='" + "top:" + y + "px;left:" + x + "px;width:" + range.boundingWidth + "px;height:3px" + "'></div>").appendTo(document.body).show(); } range.move("word"); range.setEndPoint("EndToEnd", wholerange); } } } 
    }; $.fn.spellayt.replace = function(value) { var caret = getCurrentWord(); if (caret != null) { if (caret.text.indexOf(" ") != -1) value += ' '; caret.text = value; refocus(); return true; } return false; }; $.fn.spellayt.ignore = function() { var caret = getCurrentWord(); if (caret != null) { var word = $.trim(caret.text); var suggest = global.suggestions[word]; if (suggest != null) { suggest.ignore = true; refocus(); return true; } } return false; }; function breakText(input) { if (input == null) return; if (!global.changed) { var sentences = splitSentences(input.value); if (sentences == null) return; for (var i = 0; i < sentences.length; i++) { global.wordQueue.push({ call: function(parm) { checkSentence(parm); }, data: sentences[i] }); } } else { var sentence = getCurrentSentence(); global.wordQueue.push({ call: function(parm) { checkSentence(parm); }, data: sentence }); } global.changed = false; } function loadDictionary(data) { for (var i = 0; i < 26; i++) { global.dictionaryArray[i] = new Array(13); for (var i2 = 0; i2 < 13; i2++) { global.dictionaryArray[i][i2] = new Array(); } } var position = data.indexOf("\r\n"); var lastPosition = 0; while (position > -1) { var word = data.substring(lastPosition, position); var chr = word.charCodeAt(0); var len = word.length; if (!isNaN(chr)) { if (len > 13) len = 13; if (chr > 96 && chr < 123) chr -= 32; chr -= 65; if (chr >= 0 && chr <= 25) global.dictionaryArray[chr][len - 1].push(word); } lastPosition = position + 2; position = data.indexOf("\r\n", lastPosition); } data = null; } function doWordBreak() { if (global.wordQueue.length > 0) { var work = global.wordQueue.shift(); work.call(work.data); }; global.wordTimer = setTimeout(function() { doWordBreak(); }, global.options.milliseconds); } function doSuggestionWork() { if (global.suggestQueue.length > 0) { var work = global.suggestQueue.shift(); work.call(work.data); } global.suggestTimer = setTimeout(function() { doSuggestionWork(); }, 10); } function checkSentence(data) {
        var sentence = data; var words = sentence.match(global.options.matchWord); if (words == null) return
        for (var i = 0; i < words.length; i++) { global.wordQueue.push({ call: function(parm) { checkWord(parm); }, data: words[i] }); } 
    } function checkWord(data) { var word = data; if (global.words[word] != null) return; global.words[word] = true; var chr = getWordIndex(word); if (chr < 0 || chr > 25) return; if (word.toUpperCase() == word) return; var suggest = { term: word, index: chr, alts: null, match: false, ignore: false, ready: false }; global.wordQueue.push({ call: function(parm) { lookupWord(parm); }, data: { suggest: suggest, word: word} }); } function lookupWord(data) { var suggest = data.suggest; var word = data.word; var length = word.length; if (length > 13) length = 13; suggest.match = ($.inArray(word, global.dictionaryArray[suggest.index][length - 1]) > -1); if (!suggest.match) { var chr = word.charCodeAt(0); if (chr > 64 && chr < 91) { global.wordQueue.push({ call: function(parm) { lookupWord(parm); }, data: { suggest: suggest, word: word.toLowerCase()} }); return; } } global.suggestions[suggest.term] = suggest; } function getSuggestion(suggest, input) { suggest.alts = new Array(); for (var i = 0; i <= 4; i++) suggest.alts[i] = new Array(); var array = global.dictionaryArray[suggest.index]; var word = suggest.term; var wordlength = word.length - 1; if (wordlength > 12) wordlength = 12; if (wordlength == 1) { var altword = (word.charAt(1) + word.charAt(0)).toLowerCase(); var altarray = global.dictionaryArray[getWordIndex(altword)]; if ($.inArray(altword, altarray[1]) > -1) suggest.alts[0].push(altword); } if (wordlength > 1) { var isProper = (word.charCodeAt(0) >= 65 && word.charCodeAt(0) <= 91); var index = getWordIndex(word); for (var i = 0; i < 26; i++) { if (i != index) { var altword = (isProper) ? String.fromCharCode(65 + i) + word.substr(1) : String.fromCharCode(97 + i) + word.substr(1); var altarray = global.dictionaryArray[i]; if ($.inArray(altword, altarray[wordlength]) > -1) suggest.alts[1].push(altword); var altword = (!isProper) ? String.fromCharCode(65 + i) + word.substr(1) : String.fromCharCode(97 + i) + word.substr(1); if ($.inArray(altword, altarray[wordlength]) > -1) suggest.alts[2].push(altword); } } } global.suggestQueue.push({ call: function(parm) { getSuggestionArray(parm); }, data: { word: word, array: array[wordlength], suggest: suggest} }); if (wordlength < 12) global.suggestQueue.push({ call: function(parm) { getSuggestionArray(parm); }, data: { word: word, array: array[wordlength + 1], suggest: suggest} }); if (wordlength > 0) global.suggestQueue.push({ call: function(parm) { getSuggestionArray(parm); }, data: { word: word, array: array[wordlength - 1], suggest: suggest} }); if (wordlength < 11) global.suggestQueue.push({ call: function(parm) { getSuggestionArray(parm); }, data: { word: word, array: array[wordlength + 2], suggest: suggest} }); global.suggestQueue.push({ call: function(parm) { completeSuggestion(parm); }, data: { suggest: suggest, input: input} }); doSuggestionWork(); } function getSuggestionArray(parms) { var word = parms.word; var array = parms.array; var suggest = parms.suggest; for (var i = 0; i < array.length; i++) { var dicword = array[i]; var ld = levenshteinDistance(word, dicword); if (ld == 0) { suggest.alts[0].push(dicword); } else { var factor = Math.floor(word.length / 2); if (factor <= 0) factor = 1; if (factor > 4) factor = 4; if (factor >= ld) suggest.alts[ld].push(dicword); } } } function completeSuggestion(parms) { parms.suggest.ready = true; clearTimeout(global.suggestTimer); showSuggestions(parms.input) } function showSuggestions(input) { var caret = getCurrentWord(); if (caret != null) { var x = caret.boundingLeft + $(window).scrollLeft() + $(input).scrollLeft(); var y = caret.boundingTop + (caret.boundingHeight / 2) + $(window).scrollTop() + $(input).scrollTop(); var style = "top:" + y + "px;left:" + x + "px;height:auto"; var word = $.trim(caret.text); var suggest = global.suggestions[word]; if (suggest != null && !suggest.match && !suggest.ignore) { var isProper = (word.charCodeAt(0) >= 65 && word.charCodeAt(0) <= 91); clearTimeout(global.wordTimer); clearInterval(global.highlight); clearInterval(global.breakTimer); if (!suggest.ready) { getSuggestion(suggest, input); return true; } var menuHtml = "<div id='divSuggest' class='spellaytDiv' style='" + style + "'></div>"; var menu = $(menuHtml).appendTo(document.body); var count = 0; for (var i = 0; i < suggest.alts.length; i++) { if (i < 2 || count + suggest.alts[i].length <= global.options.maximum) { for (var i2 = 0; i2 < suggest.alts[i].length; i2++) { var sel = suggest.alts[i][i2].replace("'", "&#39;"); if (isProper) sel = sel.charAt(0).toUpperCase() + sel.substr(1); menu.append("<a class='spellaytMenuItem' href='#' onmousedown='jQuery.fn.spellayt.replace(\"" + sel + "\");return false;'>" + sel + "</a>"); count++; } } } if (count == 0) menu.append("<a class='spellaytMenuItem' href='#' onmousedown='jQuery.fn.spellayt.ignore();return false;'>(" + global.options.resources.nosuggest + ")</a>"); menu.append("<div class='spellaytMenuSep'><span style='height:1px'/></div>"); menu.append("<a class='spellaytMenuItem' href='#' onmousedown='jQuery.fn.spellayt.ignore();return false;'>" + global.options.resources.ignore + "</a>"); if ($.browser.msie && $.browser.version == 6) { if ($.fn.bgiframe) menu.bgiframe(); } menu.show(); return true; } } return false; } function splitSentences(text) { var sentences = text.match(global.options.matchSentence); var result = new Array(); if (sentences == null) return; for (var i = 0; i < sentences.length; i++) { var sentence = sentences[i]; if (sentence != null) { sentence = $.trim(sentence); result.push(sentence); } } return result; } function refocus() { setTimeout(function() { global.current.focus(); $.fn.spellayt.highlight(global.current); }, 200); } function levenshteinDistance(s, t) { var d = new Array(); var n = s.length; var m = t.length; if (n == 0) return m; if (m == 0) return n; for (var i = 0; i <= n; i++) d[i] = new Array(); for (var i = 0; i <= n; i++) d[i][0] = i; for (var j = 0; j <= m; j++) d[0][j] = j; for (var i = 1; i <= n; i++) { var s_i = s.charAt(i - 1); for (var j = 1; j <= m; j++) { if (i == j && d[i][j] > 4) return n; var t_j = t.charAt(j - 1); var cost = (s_i == t_j) ? 0 : 1; var mi = d[i - 1][j] + 1; var b = d[i][j - 1] + 1; var c = d[i - 1][j - 1] + cost; if (b < mi) mi = b; if (c < mi) mi = c; d[i][j] = mi; if (i > 1 && j > 1 && s_i == t.charAt(j - 2) && s.charAt(i - 2) == t_j) { d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + cost); } } } return d[n][m]; } function getWordIndex(word) { var chr = word.charCodeAt(0); if (chr > 96 && chr < 123) chr -= 32; chr -= 65; return chr; } function getCurrentSentence() { caret = document.selection.createRange(); if (!caret.expand("sentence")) return ""; return caret.text; } function getCurrentWord() { caret = document.selection.createRange(); if (!caret.expand("word")) return null; if (caret.text.length > 0) return caret; caret = document.selection.createRange(); var i = -1; var dup = caret.duplicate(); while (i < 0 && dup.text == dup.htmlText) { i = caret.moveStart("character", -1); dup = caret.duplicate(); dup.expand("word"); } if (caret.text.length > 1) caret.moveStart("character", 1); i = 1; while (i > 0 && caret.text == caret.htmlText) { dup = caret.duplicate(); i = caret.moveEnd("character", 1); } return dup; } 
})(jQuery);